<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"></meta><meta http-equiv="X-UA-Compatible" content="IE=edge"></meta><meta name="viewport" content="width=device-width, initial-scale=1"></meta><link rel="alternative" href="/atom.xml" title="Bubblings Blog" type="application/atom+xml"></link><link rel="icon" href="/favicon.ico"></link><title>javascript中字符串常用操作总结 - Bubblings Blog</title><meta name="description" content="javascript中字符串常用操作总结"></meta><link rel="stylesheet" href="/css/style.css" type="text/css"></link></head><body><header class="site-head"><div class="inner"><h1 class="site-title u-fl"><a shape="rect" href="/">Bubblings Blog</a></h1><nav class="site-nav u-fr"><ul class="site-nav__list"><li class="site-nav__item"><a shape="rect" class="site-nav__link" href="/">首页</a></li><li class="site-nav__item"><a shape="rect" class="site-nav__link" href="/archives">归档</a></li><li class="site-nav__item"><a shape="rect" class="site-nav__link" href="/lab">前端实验室</a></li><li class="site-nav__item"><a shape="rect" class="site-nav__link" href="/guessbook">关于&amp;留言</a></li></ul></nav></div></header><section class="site-content"><main class="site-main"><article class="post"><header class="post__head"><time datetime="2012-12-09T08:56:00.000Z" class="post__time">十二月 9, 2012</time><h1 class="post__title"><a shape="rect" href="/2012/the-summary-of-javascript-string/">javascript中字符串常用操作总结</a></h1></header><div class="post__main"><p>字符串的操作在js中非常频繁，也非常重要。以往看完书之后都能记得非常清楚，但稍微隔一段时间不用，便会忘得差不多，记性不好是硬伤啊。。。今天就对字符串的一些<em>常用</em>操作做个整理，一者加深印象，二者方便今后温习查阅</p>
<h2 id="String对象属性">String对象属性</h2>
<h4 id="(1)length属性">(1)length属性</h4>
<p>length算是字符串中非常常用的一个属性了，它的功能是获取字符串的长度。当然需要注意的是js中的中文每个汉字也只代表一个字符，这里可能跟其他语言有些不一样。</p>
<pre><code>var <span class="keyword">str</span> = <span class="string">'abc'</span>;
console.<span class="keyword">log</span>(<span class="keyword">str</span>.length);
</code></pre><h4 id="(2)prototype属性">(2)prototype属性</h4>
<p>prototype在面向对象编程中会经常用到，用来给对象添加属性或方法，并且添加的方法或属性在所有的实例上共享。因此也常用来扩展js内置对象，如下面的代码给字符串添加了一个去除两边空格的方法：</p>
<pre><code><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s*|\s*$/g</span>, <span class="string">''</span>);
}
</code></pre><a shape="rect" id="more"></a>

<h2 id="String对象方法">String对象方法</h2>
<h3 id="1-获取类方法">1.获取类方法</h3>
<h4 id="(1)_charAt()">(1) charAt()</h4>
<blockquote>
<p>stringObject.charAt(index)</p>
</blockquote>
<p>charAt()方法可用来获取指定位置的字符串，index为字符串索引值，从0开始到string.leng - 1，若不在这个范围将返回一个空字符串。如：</p>
<pre><code>var <span class="keyword">str</span> = <span class="string">'abcde'</span>;
console.<span class="keyword">log</span>(<span class="keyword">str</span>.charAt(<span class="number">2</span>));        <span class="comment">//返回c</span>
console.<span class="keyword">log</span>(<span class="keyword">str</span>.charAt(<span class="number">8</span>));        <span class="comment">//返回空字符串</span>
</code></pre><h4 id="(2)_charCodeAt()">(2) charCodeAt()</h4>
<blockquote>
<p>stringObject.charCodeAt(index)</p>
</blockquote>
<p>charCodeAt()方法可返回指定位置的字符的Unicode编码。charCodeAt()方法与charAt()方法类似，都需要传入一个索引值作为参数，区别是前者返回指定位置的字符的编码，而后者返回的是字符子串。</p>
<pre><code>var <span class="keyword">str</span> = <span class="string">'abcde'</span>;
console.<span class="keyword">log</span>(<span class="keyword">str</span>.charCodeAt(<span class="number">0</span>));        <span class="comment">//返回97</span>
</code></pre><h4 id="(3)_fromCharCode()">(3) fromCharCode()</h4>
<blockquote>
<p>String.fromCharCode(numX,numX,…,numX)</p>
</blockquote>
<p>fromCharCode()可接受一个或多个Unicode值，然后返回一个字符串。另外该方法是String 的静态方法，字符串中的每个字符都由单独的数字Unicode编码指定。</p>
<pre><code><span class="built_in">String</span>.fromCharCode(<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>)    <span class="comment">//返回abcde</span>
</code></pre><h3 id="2-查找类方法">2.查找类方法</h3>
<h4 id="(1)_indexOf()">(1) indexOf()</h4>
<blockquote>
<p>stringObject.indexOf(searchvalue,fromindex)</p>
</blockquote>
<p>indexOf()用来检索指定的字符串值在字符串中首次出现的位置。它可以接收两个参数，searchvalue表示要查找的子字符串，fromindex表示查找的开始位置，省略的话则从开始位置进行检索。</p>
<pre><code>var <span class="keyword">str</span> = <span class="string">'abcdeabcde'</span>;
console.<span class="keyword">log</span>(<span class="keyword">str</span>.indexOf(<span class="string">'a'</span>));    <span class="comment">// 返回0</span>
console.<span class="keyword">log</span>(<span class="keyword">str</span>.indexOf(<span class="string">'a'</span>, <span class="number">3</span>));    <span class="comment">// 返回5</span>
console.<span class="keyword">log</span>(<span class="keyword">str</span>.indexOf(<span class="string">'bc'</span>));    <span class="comment">// 返回1</span>
</code></pre><h4 id="(2)_lastIndexOf()方法">(2) lastIndexOf()方法</h4>
<blockquote>
<p>stringObject.lastIndexOf(searchvalue,fromindex)</p>
</blockquote>
<p>lastIndexOf()语法与indexOf()类似，它返回的是一个指定的子字符串值最后出现的位置，其检索顺序是从后向前。</p>
<pre><code>var <span class="keyword">str</span> = <span class="string">'abcdeabcde'</span>;
console.<span class="keyword">log</span>(<span class="keyword">str</span>.lastIndexOf(<span class="string">'a'</span>));    <span class="comment">// 返回5</span>
console.<span class="keyword">log</span>(<span class="keyword">str</span>.lastIndexOf(<span class="string">'a'</span>, <span class="number">3</span>));    <span class="comment">// 返回0 从第索引3的位置往前检索</span>
console.<span class="keyword">log</span>(<span class="keyword">str</span>.lastIndexOf(<span class="string">'bc'</span>));    <span class="comment">// 返回6</span>
</code></pre><h4 id="(3)_search()方法">(3) search()方法</h4>
<blockquote>
<p>stringObject.search(substr)<br clear="none"></br>stringObject.search(regexp)</p>
</blockquote>
<p>search()方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。它会返回第一个匹配的子字符串的起始位置，如果没有匹配的，则返回-1。</p>
<pre><code>var <span class="keyword">str</span> = <span class="string">'abcDEF'</span>;
console.<span class="keyword">log</span>(<span class="keyword">str</span>.search(<span class="string">'c'</span>));    <span class="comment">//返回2</span>
console.<span class="keyword">log</span>(<span class="keyword">str</span>.search(<span class="string">'d'</span>));    <span class="comment">//返回-1</span>
console.<span class="keyword">log</span>(<span class="keyword">str</span>.search(/d/i));    <span class="comment">//返回3</span>
</code></pre><h4 id="(4)_match()方法">(4) match()方法</h4>
<blockquote>
<p>stringObject.match(substr)<br clear="none"></br>stringObject.match(regexp)</p>
</blockquote>
<p>match()方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</p>
<p>如果参数中传入的是子字符串或是没有进行全局匹配的正则表达式，那么match()方法会从开始位置执行一次匹配，如果没有匹配到结果，则返回null。否则则会返回一个数组，该数组的第0个元素存放的是匹配文本，除此之外，返回的数组还含有两个对象属性index和input，分别表示匹配文本的起始字符索引和stringObject 的引用(即原字符串)。</p>
<pre><code>var <span class="keyword">str</span> = <span class="string">'1a2b3c4d5e'</span>;
console.<span class="keyword">log</span>(<span class="keyword">str</span>.<span class="keyword">match</span>(<span class="string">'h'</span>));    <span class="comment">//返回null</span>
console.<span class="keyword">log</span>(<span class="keyword">str</span>.<span class="keyword">match</span>(<span class="string">'b'</span>));    <span class="comment">//返回["b", index: 3, input: "1a2b3c4d5e"]</span>
console.<span class="keyword">log</span>(<span class="keyword">str</span>.<span class="keyword">match</span>(/b/));    <span class="comment">//返回["b", index: 3, input: "1a2b3c4d5e"]</span>
</code></pre><p>如果参数传入的是具有全局匹配的正则表达式，那么match()从开始位置进行多次匹配，直到最后。如果没有匹配到结果，则返回null。否则则会返回一个数组，数组中存放所有符合要求的子字符串，并且没有index和input属性。</p>
<pre><code><span class="reserved">var</span> str = <span class="string">'1a2b3c4d5e'</span>;
<span class="built_in">console</span>.log(str.match(<span class="regexp">/h/g</span>));    <span class="regexp">//</span>返回<span class="literal">null</span>
<span class="built_in">console</span>.log(str.match(<span class="regexp">/\d/g</span>));    <span class="regexp">//</span>返回[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>]
</code></pre><h3 id="3-截取类方法">3.截取类方法</h3>
<h4 id="(1)substring()">(1)substring()</h4>
<blockquote>
<p>stringObject.substring(start,end)</p>
</blockquote>
<p>substring()是最常用到的字符串截取方法，它可以接收两个参数(参数不能为负值)，分别是要截取的开始位置和结束位置，它将返回一个新的字符串，其内容是从start处到end-1处的所有字符。若结束参数(end)省略，则表示从start位置一直截取到最后。</p>
<pre><code>var <span class="keyword">str</span> = <span class="string">'abcdefg'</span>;
console.<span class="keyword">log</span>(<span class="keyword">str</span>.substring(<span class="number">1</span>, <span class="number">4</span>));    <span class="comment">//返回bcd</span>
console.<span class="keyword">log</span>(<span class="keyword">str</span>.substring(<span class="number">1</span>));    <span class="comment">//返回bcdefg</span>
console.<span class="keyword">log</span>(<span class="keyword">str</span>.substring(-<span class="number">1</span>));    <span class="comment">//返回abcdefg，传入负值时会视为0</span>
</code></pre><h4 id="(2)_slice()">(2) slice()</h4>
<blockquote>
<p>stringObject.slice(start,end)</p>
</blockquote>
<p>slice()方法与substring()方法非常类似，它传入的两个参数也分别对应着开始位置和结束位置。而区别在于，slice()中的参数可以为负值，如果参数是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符。</p>
<pre><code>var <span class="keyword">str</span> = <span class="string">'abcdefg'</span>;
console.<span class="keyword">log</span>(<span class="keyword">str</span>.slice(<span class="number">1</span>, <span class="number">4</span>));    <span class="comment">//返回bcd</span>
console.<span class="keyword">log</span>(<span class="keyword">str</span>.slice(-<span class="number">3</span>, -<span class="number">1</span>));    <span class="comment">//返回ef</span>
console.<span class="keyword">log</span>(<span class="keyword">str</span>.slice(<span class="number">1</span>, -<span class="number">1</span>));    <span class="comment">//返回bcdef</span>
console.<span class="keyword">log</span>(<span class="keyword">str</span>.slice(-<span class="number">1</span>, -<span class="number">3</span>));    <span class="comment">//返回空字符串，若传入的参数有问题，则返回空</span>
</code></pre><h4 id="(3)_substr()">(3) substr()</h4>
<blockquote>
<p>stringObject.substr(start,length)</p>
</blockquote>
<p>substr()方法可在字符串中抽取从start下标开始的指定数目的字符。其返回值为一个字符串，包含从 stringObject的start（包括start所指的字符）处开始的length个字符。如果没有指定 length，那么返回的字符串包含从start到stringObject的结尾的字符。另外如果start为负数，则表示从字符串尾部开始算起。</p>
<pre><code>var <span class="keyword">str</span> = <span class="string">'abcdefg'</span>;
console.<span class="keyword">log</span>(<span class="keyword">str</span>.substr(<span class="number">1</span>, <span class="number">3</span>))    <span class="comment">//返回bcd</span>
console.<span class="keyword">log</span>(<span class="keyword">str</span>.substr(<span class="number">2</span>))    <span class="comment">//返回cdefg</span>
console.<span class="keyword">log</span>(<span class="keyword">str</span>.substr(-<span class="number">2</span>, <span class="number">4</span>))    <span class="comment">//返回fg，目标长度较大的话，以实际截取的长度为准</span>
</code></pre><h3 id="4-其他方法">4.其他方法</h3>
<h4 id="(1)_replace()方法">(1) replace()方法</h4>
<blockquote>
<p>stringObject.replace(regexp/substr,replacement)</p>
</blockquote>
<p>replace()方法用来进行字符串替换操作，它可以接收两个参数，前者为被替换的子字符串（可以是正则），后者为用来替换的文本。</p>
<p>如果第一个参数传入的是子字符串或是没有进行全局匹配的正则表达式，那么replace()方法将只进行一次替换（即替换最前面的），返回经过一次替换后的结果字符串。</p>
<pre><code>var <span class="keyword">str</span> = <span class="string">'abcdeabcde'</span>;
console.<span class="keyword">log</span>(<span class="keyword">str</span>.replace(<span class="string">'a'</span>, <span class="string">'A'</span>));
console.<span class="keyword">log</span>(<span class="keyword">str</span>.replace(/a/, <span class="string">'A'</span>));
</code></pre><p>如果第一个参数传入的全局匹配的正则表达式，那么replace()将会对符合条件的子字符串进行多次替换，最后返回经过多次替换的结果字符串。</p>
<pre><code>var str = <span class="string">'abcdeabcdeABCDE'</span>;
console.log(str.replace(<span class="regexp">/a/g</span>, <span class="string">'A'</span>));    <span class="regexp">//</span>返回<span class="constant">AbcdeAbcdeABCDE</span>
console.log(str.replace(<span class="regexp">/a/gi</span>, <span class="string">'$'</span>));    <span class="regexp">//</span>返回<span class="variable">$bcde</span><span class="variable">$bcde</span><span class="variable">$BCDE</span>
</code></pre><h4 id="(2)_split()方法">(2) split()方法</h4>
<blockquote>
<p>stringObject.split(separator,howmany)</p>
</blockquote>
<p>split()方法用于把一个字符串分割成字符串数组。第一个参数separator表示分割位置(参考符)，第二个参数howmany表示返回数组的允许最大长度(一般情况下不设置)。</p>
<pre><code>var str = <span class="string">'a|b|c|d|e'</span>;
console.<span class="keyword">log</span>(str.<span class="keyword">split</span>(<span class="string">'|'</span>));    <span class="regexp">//</span>返回[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>]
console.<span class="keyword">log</span>(str.<span class="keyword">split</span>(<span class="string">'|'</span>, <span class="number">3</span>));    <span class="regexp">//</span>返回[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]
console.<span class="keyword">log</span>(str.<span class="keyword">split</span>(<span class="string">''</span>));    <span class="regexp">//</span>返回[<span class="string">"a"</span>, <span class="string">"|"</span>, <span class="string">"b"</span>, <span class="string">"|"</span>, <span class="string">"c"</span>, <span class="string">"|"</span>, <span class="string">"d"</span>, <span class="string">"|"</span>, <span class="string">"e"</span>]
</code></pre><p>也可以用正则来进行分割</p>
<pre><code><span class="reserved">var</span> str = <span class="string">'a1b2c3d4e'</span>;
<span class="built_in">console</span>.log(str.split(<span class="regexp">/\d/</span>)); <span class="regexp">//</span>返回[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>]
</code></pre><h4 id="(3)_toLowerCase()和toUpperCase()">(3) toLowerCase()和toUpperCase()</h4>
<blockquote>
<p>stringObject.toLowerCase()<br clear="none"></br>stringObject.toUpperCase()</p>
</blockquote>
<p>toLowerCase()方法可以把字符串中的大写字母转换为小写，toUpperCase()方法可以把字符串中的小写字母转换为大写。</p>
<pre><code>var <span class="keyword">str</span> = <span class="string">'JavaScript'</span>;
console.<span class="keyword">log</span>(<span class="keyword">str</span>.toLowerCase());    <span class="comment">//返回javascript</span>
console.<span class="keyword">log</span>(<span class="keyword">str</span>.toUpperCase());    <span class="comment">//返回JAVASCRIPT</span>
</code></pre><script async="async" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<ins class="adsbygoogle" style="display:block;width:728px;height:90px;margin:20px auto" data-ad-client="ca-pub-4479188666761334" data-ad-slot="6464697017"></ins>
<script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><footer class="post__foot u-cf"><ul class="post__tag u-fl"><li class="post__tag__item"><a shape="rect" class="post__tag__link" href="/tags/javascript/">javascript</a></li></ul><a shape="rect" class="post__foot-link u-fr" href="/2012/the-summary-of-javascript-string/#comments">评论</a></footer></article><div class="comments" id="comments"><div class="ds-thread" data-thread-key="2012/the-summary-of-javascript-string/" data-url="http://riny.net/2012/the-summary-of-javascript-string/"><script>var duoshuoQuery = {short_name:"riny"};
(function() {
  var ds = document.createElement('script');
  ds.type = 'text/javascript';ds.async = true;
  ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';
  ds.charset = 'UTF-8';
  document.getElementsByTagName('body')[0].appendChild(ds);
})();</script></div></div></main><aside class="site-aside"><div class="widget tags"><div class="h">categories</div><div class="b"> <ul><li><a shape="rect" href="/categories/javascript/">javascript</a><small>(4)</small></li><li><a shape="rect" href="/categories/杂谈/">杂谈</a><small>(4)</small></li><li><a shape="rect" href="/categories/工具/">工具</a><small>(3)</small></li><li><a shape="rect" href="/categories/nodejs/">nodejs</a><small>(3)</small></li><li><a shape="rect" href="/categories/css/">css</a><small>(2)</small></li><li><a shape="rect" href="/categories/sass/">sass</a><small>(2)</small></li></ul></div></div><div class="widget fixed" id="fixed"><div class="catalog"><h2>目录结构  </h2><ul class="catalog-list"></ul></div><script async="async" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle" style="display:inline-block;width:240px;height:60px" data-ad-client="ca-pub-4479188666761334" data-ad-slot="4848363019"></ins>
<script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></aside></section><footer class="site-foot"><div class="inner"><div class="site-copy u-fl">© 2016 Bubblings<bdi> ❤ Theme by <a shape="rect" href="/">Bubblings</a> and <a shape="rect" href="https://github.com/unmric/hexo-theme-strict" target="_blank" rel="nofollow">unmric</a></bdi></div><menu class="page-menu u-fr"><li class="page-menu__item"><a shape="rect" class="page-menu__link icon-arrow-left" title="Previous" href="/2013/sublime-markdown/">prev</a></li><li class="page-menu__item"><a shape="rect" class="page-menu__link icon-arrow-right" title="Next" href="/2012/css-abbr/">next</a></li></menu></div></footer><div id="back-top" title="返回顶部"></div><script src="/js/script.js"></script><script src="http://s11.cnzz.com/stat.php?show=pic1&amp;id=5886804&amp;web_id=5886804" language="JavaScript"></script></body></html>

